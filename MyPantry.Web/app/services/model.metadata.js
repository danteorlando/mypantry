/**
 * CC Model Metadata by hand
 */
// ReSharper disable InconsistentNaming
(function () {
    'use strict';

    var serviceId = 'model.metadata';
    angular.module('app').factory(serviceId, ['model.validation', metadata]);

function metadata() {

    // 'Identity' is the default key generation strategy for this app
    var keyGen = breeze.AutoGeneratedKeyType.Identity;
    // namespace of the corresponding classes on the server
    var namespace = 'MyPantry.Model'; 

    // Breeze Labs: breeze.metadata.helper.js
    // https://github.com/IdeaBlade/Breeze/blob/master/Breeze.Client/Scripts/Labs/breeze.metadata-helper.js
    // The helper reduces data entry by applying common conventions
    // and converting common abbreviations (e.g., 'type' -> 'dataType')
    var helper = new breeze.config.MetadataHelper(namespace, keyGen);

    /*** Convenience fns and vars ***/
    var store; // the metadataStore that we'll be building

    // addType - make it easy to add the type to the store using the helper
    var addType = function (type) { helper.addTypeToStore(store, type); };

    // DataTypes
    var DT = breeze.DataType;
    var BOOL = DT.Boolean;
    var DATE = DT.DateTime;
    var ID = DT.Int32;

    return {
        fillMetadataStore: fillMetadataStore
    };

    /**** IMPLEMENTATION DETAILS ***/

    function fillMetadataStore(metadataStore) {
        store = metadataStore;

         // Add types in alphabetical order ... because we can
        addIngredient();
        addPantryItem();
        addRecipe();
    }

    function addIngredient() {
        addType({
            name: 'Ingredient',
            dataProperties: {
                id:          { type: ID },
                name:        { max: 50, nullOk: false },
                description: { max: 400},
                imageSource: { max: 400 },
                isPartial: { type: BOOL, nullOk: false, isUnmapped: true }
            }
        });
    }
    function addPantryItem() {
        addType({
            name: 'PantryItem',
            dataProperties: {
                id: { type: ID },
                name: { max: 50, nullOk: false },
                description: { max: 400 },
                imageSource: { max: 400 },
                ingredientId: { type: ID, nullOk: false },
                isPartial: { type: BOOL, nullOk: false, isUnmapped: true }
            },
            navigationProperties: {
                ingredient: 'Ingredient'
            }
        });
    }
    function addRecipe() {
        addType({
            name: 'Recipe',
            dataProperties: {
                id: { type: ID },
                name: { max: 50, nullOk: false },
                description: { max: 400 },
                imageSource: { max: 400 },
                isPartial: { type: BOOL, nullOk: false, isUnmapped: true }
            }
        });
    }

    
}
})();